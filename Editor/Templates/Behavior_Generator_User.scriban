To simulate input in Unity, follow this pattern EXACTLY:
```csharp
```csharp
// Exemplo de como simular input:
using NUnit.Framework;
using System.Collections;
using UnityEngine;
using UnityEngine.InputSystem;
using UnityEngine.TestTools;

// 1. The class MUST inherit from InputTestFixture.
public class MeuTesteDeInput : InputTestFixture
{
    [UnityTest]
    public IEnumerator TesteDeExemploComInput()
    {
        // 2. Create and add the required virtual device (Keyboard, Mouse, Gamepad).
        var keyboard = InputSystem.AddDevice<Keyboard>();

        // 3. Simulate the action on the device (e.g. pressing the 'W' key).
        Press(keyboard.wKey);

       // 4. WAIT A FRAME for Unity to process the input.
        yield return null; 

        // 5. Check the result of the action in your game object.
        // Assert.IsTrue(player.isMovingForward);
    }
}
```

Based on the following C# source code of the class:
```csharp
{{ sut_class }}
``` 
{{ if sut_related_methods }}
Contexto adicional: a classe também possui os seguintes métodos:
```csharp
{{ for method in sut_related_methods }}
...
{{ method }}
{{ end }}
```
{{ end }}
Your task is to generate a complete unit test using the Unity Test Framework (UTF) for the {{ extra }} method.

The test must specifically validate the following intent: "{{ intention }}".

RULES:

Use UTF's [Test] or [UnityTest] attributes when appropriate.

Include the required using statements at the top of the file.

The test class must be public and follow naming conventions (e.g., TestsClassName).

The response should contain ONLY the complete C# code. Do not include any explanations, introductions, or any text outside the code block.

The code must be inside a "```csharp```" block.